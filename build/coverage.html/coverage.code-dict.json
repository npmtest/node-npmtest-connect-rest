{"/home/travis/build/npmtest/node-npmtest-connect-rest/test.js":"/* istanbul instrument in package npmtest_connect_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-connect-rest/lib.npmtest_connect_rest.js":"/* istanbul instrument in package npmtest_connect_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_connect_rest = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_connect_rest = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-connect-rest/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-connect-rest && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_connect_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_connect_rest\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_connect_rest.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_connect_rest.rollup.js'] =\n            local.assetsDict['/assets.npmtest_connect_rest.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_connect_rest.__dirname + '/lib.npmtest_connect_rest.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/rest-services.js":"'use strict'\n\nlet url = require('url')\n\nrequire('./ES7Fixer')\n\nlet Rest = require('./Rest')\nlet Dispatcher = require('./util/Dispatcher')\n\nlet Httphelper = require('./util/HttpHelper')\n\nexports.create = function ( options ) {\n\treturn new Rest( options )\n}\n\nexports.httphelper = function ( opts ) {\n\treturn new Httphelper( opts )\n}\n\nfunction redirect ( url ) {\n\tlet status = 302\n\n\tif (arguments.length === 2) {\n\t\tstatus = url\n\t\turl = arguments[1]\n\t}\n\n\tthis.statusCode = status\n\tthis.setHeader('Location', url)\n\tthis.setHeader('Content-Length', '0')\n\tthis.end()\n}\n\nexports.dispatcher = function ( method, path, handler, addRedirect ) {\n\treturn Dispatcher.dispatch( method, path, url, !addRedirect ? handler : function (req, res, next) {\n\t\tif ( !res.redirect )\n\t\t\tres.redirect = redirect\n\t\thandler(req, res, next)\n\t} )\n}\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/ES7Fixer.js":"/* jshint bitwise: false */\n'use strict'\n\nif (!Array.prototype.includes) {\n\tArray.prototype.includes = function (searchElement /*, fromIndex*/ ) {\n\t\t'use strict'\n\t\tlet O = Object(this)\n\t\tlet len = parseInt(O.length) || 0\n\t\tif (len === 0) {\n\t\t\treturn false\n\t\t}\n\t\tlet n = parseInt(arguments[1]) || 0\n\t\tlet k\n\t\tif (n >= 0) {\n\t\t\tk = n\n\t\t} else {\n\t\t\tk = len + n\n\t\t\tif (k < 0) {\n\t\t\t\tk = 0\n\t\t\t}\n\t\t}\n\t\tlet currentElement\n\t\twhile (k < len) {\n\t\t\tcurrentElement = O[k]\n\t\t\tif (searchElement === currentElement) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tk++\n\t\t}\n\t\treturn false\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/Rest.js":"'use strict'\n\n/*\n{\n\toptions: true,\n\tcontext: '/api',\n\theaders: [],\n\tdiscover: { path: '', secure: true },\n\tproto: { path: '', secure: true },\n\ttimeout: {\n\t\tamount: 0\n\t\tcallback: fn\n\t},\n\tapiKeys: [],\n\tlogger: {}\n}\n*/\nlet url = require('url')\nlet _ = require('isa.js')\nlet fs = require('fs')\nlet path = require('path')\n\nvar Assigner = require('assign.js')\nvar assigner = new Assigner()\n\nlet VERSION = JSON.parse( fs.readFileSync( path.join(__dirname, '..', 'package.json'), 'utf8' ) ).version\n\nlet Logger = require('./util/Logger')\n\nfunction protoPather ( mapping ) {\n\treturn function ( request, content, callback ) {\n\t\tlet utokens = request.parameters.path.split( '/' )\n\t\tlet method = utokens[0]\n\t\tlet version = utokens[1]\n\t\tlet pathname =\t'/' + utokens.slice( 2 ).join( '/' )\n\t\tconsole.log( '....', utokens )\n\t\tlet routes = mapping[ method ].filter( function (route) { return route.matches(\n\t\t\tnull, pathname, version, false\n\t\t) } )\n\n\t\tcallback( null, routes.length > 0 ? routes.map( function (route) { return route.config.prototypeObject } )[0] : 'No matching service' )\n\t}\n}\n\nfunction discover ( mapping ) {\n\treturn function (request, content, callback) {\n\t\tlet version = request.parameters.version\n\t\tlet matchingMaps = {}\n\t\tfor (let key in mapping) {\n\t\t\tlet value = mapping[key]\n\t\t\tmatchingMaps[ key ] = []\n\t\t\tvalue.forEach( function (element) {\n\t\t\t\telement.matchings( version ).forEach( function (match) {\n\t\t\t\t\tmatchingMaps[ key ].push( match )\n\t\t\t\t})\n\t\t\t} )\n\t\t}\n\t\tcallback( null, matchingMaps )\n\t}\n}\n\nfunction Rest ( config ) {\n\tthis.config = {\n\t\toptions: config.options,\n\t\tcontext: config.context ? config.context : (config.context === '' ? '' : '/api'),\n\t\theaders: config.headers || { },\n\t\tdiscover: config.discover,\n\t\tproto: config.proto,\n\t\ttimeout: config.timeout,\n\t\tapiKeys: config.apiKeys,\n\t\tlogger: config.logger,\n\t\tattributesRespected: config.attributesRespected || [ 'user', 'files' ]\n\t}\n\tthis.logger = Logger.createLogger( 'rest', {'connect-rest': VERSION}, config.logger )\n\tthis.mapping = {\n\t\t'HEAD': [],\n\t\t'GET': [],\n\t\t'POST': [],\n\t\t'PUT': [],\n\t\t'PATCH': [],\n\t\t'OPTIONS': [],\n\t\t'DELETE': []\n\t}\n\n\tif ( this.config.discover && this.config.discover.path ) {\n\t\tthis.logger.restlog( null, 'dicover service activated on path: ' + this.config.discover.path + '/:version', null, 'info' )\n\t\tthis.addPath('GET', { path: this.config.discover.path + '/:version', unprotected: !this.config.discover.secure }, discover(this.mapping) )\n\t}\n\tif ( this.config.proto && this.config.proto.path ) {\n\t\tthis.logger.restlog( null, 'proto service activated on path: ' + this.config.proto.path + '/*path', null, 'info' )\n\t\tthis.addPath('GET', { path: this.config.proto.path + '/*path', unprotected: !this.config.discover.secure }, protoPather(this.mapping) )\n\t}\n}\n\nlet rest = Rest.prototype\n\nrest.getRouterMatching = function ( req, res ) {\n\tlet self = this\n\n\tif (!req.query)\n\t\treq.query = url.parse( req.url, true ).query || {}\n\n\tlet pathname = url.parse( req.url ).pathname\n\n\tlet apiKey = req.headers['api-key'] || req.headers['x-api-key'] || req.query.api_key\n\tlet version = req.headers['accept-version'] || req.headers['x-api-version'] || '*'\n\n\tlet routeMatched = self.mapping[ req.method ].find( function (route) {\n\t\tlet apiKeys = route.apiKeys || self.config.apiKeys\n\t\treturn route.matches(\n\t\t\treq, pathname, version, true, (apiKeys && apiKeys.indexOf(apiKey ) === -1)\n\t\t) && (!route.config.validator || route.config.validator(req, res) )\n\t} )\n\n\treturn { pathname: pathname, route: routeMatched }\n}\n\nrest.copyPath = function ( path, extra ) {\n\tlet self = this\n\n\tif ( _.isString(path) )\n\t\treturn assigner.assign( { path: path }, extra || {} )\n\telse if ( _.isArray(path) ) {\n\t\tlet res = []\n\t\tpath.forEach( function ( p ) {\n\t\t\tres.push( self.copyPath( p, extra ) )\n\t\t} )\n\t\treturn res\n\t}\n\telse if ( _.isObject(path) ) {\n\t\treturn assigner.assign( { }, path, extra || {} )\n\t}\n}\n\nrest = require('./util/Extender').extend( rest, path.join( __dirname, 'services' ) )\n\nmodule.exports = Rest\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/util/Logger.js":"'use strict'\n\nlet winston = require('winston')\n\nlet Assigner = require('assign.js')\nlet assigner = new Assigner()\n\nlet path = require('path')\nlet PROJECT_ROOT = path.join(__dirname, '..', '..')\nfunction getStackInfo (level, err) {\n\tif (!err) return {}\n\n\terr = err.stack ? err : new Error( err )\n\n\tlet stackIndex = level || 1\n\tlet stacklist = err.stack.split('\\n')\n\t// let stacklist = (new Error()).stack.split('\\n').slice(3)\n\n\tlet stackReg = /at\\s+(.*)\\s+\\((.*):(\\d*):(\\d*)\\)/gi\n\tlet stackReg2 = /at\\s+()(.*):(\\d*):(\\d*)/gi\n\n\tlet s = stacklist[stackIndex] || stacklist[0]\n\tlet sp = stackReg.exec(s) || stackReg2.exec(s)\n\n\tif (sp && sp.length === 5) {\n\t\treturn { callstack: {\n\t\t\tmethod: sp[1],\n\t\t\trelativePath: path.relative(PROJECT_ROOT, sp[2]),\n\t\t\tline: sp[3],\n\t\t\tpos: sp[4],\n\t\t\tfile: path.basename(sp[2]),\n\t\t\tstack: stacklist.join('\\n')\n\t\t} }\n\t}\n}\n\n\nexports.createLogger = function ( name, extension, logger ) {\n\tlogger = logger ? ( logger.file ? exports.createWinstonLogger( logger ) : logger ) : exports.createWinstonLogger( {} )\n\tlogger[name + 'log'] = function ( err, message, obj, level ) {\n\t\tthis.log( err ? 'error' : (level || 'debug'), err ? (err.message || err.toString()) : message, assigner.assign( obj || { }, extension, getStackInfo( 1, err ) ) )\n\t}.bind( logger )\n\n\treturn logger\n}\n\nexports.createWinstonLogger = function ( options ) {\n\toptions = options || {}\n\tif ( options.exceptionFile )\n\t\twinston.handleExceptions(new winston.transports.File({ filename: options.exceptionFile }))\n\tlet transports = [\n\t\tnew (winston.transports.Console)({ level: 'error', colorize: 'true' }),\n\t\tnew (winston.transports.File)( {\n\t\t\tfilename: options.file || 'server.log',\n\t\t\tlevel: options.level || 'info',\n\t\t\tmaxsize: options.maxSize || 1000000,\n\t\t\tmaxFiles: options.maxFiles || 1\n\t\t} )\n\t]\n\treturn new (winston.Logger)({ transports: transports })\n}\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/util/Extender.js":"var Assigner = require('assign.js')\nvar assigner = (new Assigner()).recursive(true)\nvar fs = require('fs')\nvar path = require('path')\n\nfunction getFiles (srcpath, extension) {\n\treturn fs.readdirSync(srcpath).filter(function (file) {\n\t\treturn file.endsWith(extension)\n\t})\n}\n\nmodule.exports = {\n\tgetExtensions: function ( path ) {\n\t\treturn getFiles( path, '.js' )\n\t},\n\textend: function ( protoType, extPath ) {\n\t\tvar extensions = this.getExtensions( extPath )\n\t\textensions.forEach( function ( extension ) {\n\t\t\tvar newServices = require( path.join( extPath, extension ) )\n\t\t\tprotoType = assigner.assign( protoType, newServices )\n\t\t} )\n\t\treturn protoType\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/services/Adder.js":"'use strict'\n\nlet Route = require('../util/Route')\n\nexports.addPath = function (key, path, action, config) {\n\tlet self = this\n\n\tconfig = config || {}\n\n\tif ( config.options ) {\n\t\tself.options( this.copyPath( path, { unprotected: true } ), function ( request, content, cb ) {\n\t\t\tcb( null, 'OK', { headers: { Allow: key } } )\n\t\t} )\n\t}\n\n\tself.mapping[ key ].push( new Route( self.config, path, config,\n\t\tfunction (request, content, callback) {\n\t\t\tif (action.length === 3) {\n\t\t\t\taction(request, content, function (err, result, resOptions) {\n\t\t\t\t\tcallback(err, { contentType: config.contentType, result: result, resOptions: resOptions || {} } )\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tlet result = action(request, content)\n\t\t\t\tlet err\n\t\t\t\tcallback( err, { contentType: config.contentType, result: result, resOptions: {} } )\n\t\t\t}\n\t\t}\n\t) )\n}\n\nexports.head = function headRest (path, action, option) {\n\tthis.addPath('HEAD', path, action, option )\n}\nexports.get = function getRest (path, action, option) {\n\tthis.addPath('GET', path, action, option )\n}\nexports.post = function postRest (path, action, option) {\n\tthis.addPath('POST', path, action, option )\n}\nexports.put = function putRest (path, action, option) {\n\tthis.addPath('PUT', path, action, option )\n}\nexports.patch = function patchRest (path, action, option) {\n\tthis.addPath('PATCH', path, action, option )\n}\nexports.options = function optionsRest (path, action, option) {\n\tthis.addPath('OPTIONS', path, action, option )\n}\nexports.del = function deleteRest (path, action, option) {\n\tthis.addPath('DELETE', path, action, option )\n}\nexports.assign = function headRest (methods, path, action, option) {\n\tlet self = this\n\n\tif ( Array.isArray(methods) ) {\n\t\tmethods.forEach(function (method) {\n\t\t\tmethod = method.toLowerCase()\n\t\t\tmethod = (method === 'delete') ? 'del' : method\n\t\t\tif ( !self[ method ] )\n\t\t\t\tthrow new Error('Not known rest type', method)\n\t\t\tself[ method ](path, action, option)\n\t\t})\n\t}\n\telse if ( methods === '*' )\n\t\tself.assign( ['head', 'get', 'post', 'put', 'patch', 'options', 'delete'], path, action, option)\n\telse\n\t\tthrow new Error('Not correct given methods', methods)\n}\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/util/Route.js":"'use strict'\n\nlet _ = require('isa.js')\n\nlet Path = require('./Path')\nlet Proback = require('proback.js')\n\nfunction Route (globalConfig, path, config, action) {\n\tlet self = this\n\n\tself.action = action\n\tself.maction = function (request, content, callback) {\n\t\taction( request, content, function (err, response) {\n\t\t\tcallback( err, response )\n\t\t} )\n\t}\n\tself.config = config || {}\n\tself.apiKeys = self.config.apiKeys\n\tself.paths = []\n\n\tif ( !path || !action || !_.isFunction( action ) )\n\t\tthrow new Error('You need to give proper parameters.')\n\n\tif ( _.isArray( path ) ) {\n\t\tself.paths = path.map( function (element) {\n\t\t\treturn new Path( globalConfig.context, element, self.config )\n\t\t} )\n\t} else {\n\t\tself.paths.push( new Path( globalConfig.context, path, self.config ) )\n\t}\n\n\tself.routes = self.paths.map( function (path) { return path.representation() } )\n}\n\nRoute.prototype.apiKeyRequired = function ( ) {\n\tfor (let i = 0; i < this.paths.length; i += 1)\n\t\tif ( this.paths[i].apiKeyRequired() )\n\t\t\treturn true\n\treturn false\n}\n\nRoute.prototype.callProtector = function ( req, res, pathname, callback ) {\n\tlet promises = this.paths.map( function ( path ) {\n\t\treturn path.callProtector( req, res, pathname )\n\t} )\n\tProback.forAll( promises, callback )\n}\n\nRoute.prototype.matches = function ( req, pathname, version, alterEnvironment, protectAPI) {\n\tlet found = this.paths.find( function (path) {\n\t\treturn path.matches( req, pathname, version || '*', alterEnvironment, protectAPI)\n\t} )\n\treturn found\n}\n\nRoute.prototype.matchings = function ( version ) {\n\tlet found = this.paths.filter(\n\t\t\tfunction ( path ) { return path.matchings( version ) }\n\t\t).map(\n\t\t\tfunction (path) {\n\t\t\t\treturn path.path\n\t\t\t}\n\t\t)\n\n\treturn found\n}\n\nmodule.exports = Route\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/util/Path.js":"'use strict'\n\nlet _ = require('isa.js')\nlet semver = require('semver')\n\nlet PARAMETER_M_DELIMETER = ':'\nlet PARAMETER_G_DELIMETER = '*'\nlet PARAMETER_O_DELIMETER = '?'\nlet PARAMETER_R_DELIMETER = '@'\n\nlet Proback = require('proback.js')\n\nfunction Path (context, path, config ) {\n\tthis.path = path\n\n\tthis.config = config || {}\n\n\tthis.isRegex = _.isRegExp( path )\n\tthis.isString = _.isString( path )\n\tthis.isObject = _.isObject( path ) && path.path\n\tthis.isOpengate = this.isString && path === '*'\n\tthis.context = this.isObject && (path.context || path.context === '') ? path.context : context\n\n\tif ( this.isObject ) {\n\t\tif ( !_.isString( path.path ) )\n\t\t\tthrow new Error('Path must be a proper string.')\n\t\tif ( path.version && !_.isString( path.version ) )\n\t\t\tthrow new Error('Version must be a proper string.')\n\t}\n\tthis.isSubReged = this.isObject && _.isRegExp( path.path )\n\tthis.protected = !this.isObject || !path.unprotected\n\tthis.protector = path.protector || this.config.protector\n\n\tlet restPath = this.isString ? path : path.path\n\tif ( restPath ) {\n\t\tlet tokens = restPath.trim().split( '/' )\n\t\tthis.cache = {\n\t\t\ttokens: tokens,\n\t\t\tfixedCount: this.countFixedTokens( tokens )\n\t\t}\n\t}\n}\n\nfunction matchesVersion ( reqVersion, apiVersion ) {\n\tif ( !apiVersion || !reqVersion || apiVersion === '*' || reqVersion === '*')\n\t\treturn true\n\n\treturn semver.satisfies( reqVersion, apiVersion )\n}\n\nPath.prototype.countFixedTokens = function ( ptokens ) {\n\tlet count = 0\n\tfor (let i = 0; i < ptokens.length; i += 1) {\n\t\tif ( !( ptokens[i].startsWith( PARAMETER_G_DELIMETER ) || ptokens[i].startsWith( PARAMETER_O_DELIMETER )) )\n\t\t\tcount += 1\n\t}\n\treturn count\n}\n\nPath.prototype.representation = function () {\n\treturn this.isRegex || this.isString ? { path: this.path, version: '*' } : { path: this.path.path, version: this.path.version || '*' }\n}\n\nPath.prototype.innerMatches = function ( requestPath, parameterReplacements ) {\n\tlet self = this\n\n\tif ( self.isOpengate )\n\t\treturn true\n\n\tlet requestTokens = requestPath.trim().split( '/' )\n\tlet ptokens = self.cache.tokens\n\n\tif ( ptokens.length !== requestTokens.length ) {\n\t\tfor (let i = 1; i <= ptokens.length; i += 1)\n\t\t\tif ( ptokens[ ptokens.length - i ].startsWith( PARAMETER_O_DELIMETER ) && requestTokens.length < ptokens.length ) {\n\t\t\t\trequestTokens.splice( requestTokens.length - i + 1, 0, '' )\n\t\t\t}\n\t}\n\n\tif ( requestTokens.length < self.cache.fixedCount )\n\t\treturn false\n\n\tif ( ptokens[ptokens.length - 1].startsWith( PARAMETER_G_DELIMETER ) ) {\n\t\tif ( requestTokens.length < ptokens.length - 1 ) return false\n\n\t\tlet newUToken = requestTokens.slice( ptokens.length - 1 ).join( '/' )\n\n\t\trequestTokens = requestTokens.slice( 0, ptokens.length )\n\t\trequestTokens[ ptokens.length - 1 ] = newUToken\n\t}\n\n\tif ( requestTokens.length > ptokens.length )\n\t\treturn false\n\n\tfor (let t = 0, idx = -1; t < requestTokens.length; t += 1) {\n\t\tif ( ptokens[t].startsWith( PARAMETER_M_DELIMETER ) )\n\t\t\tparameterReplacements[ ptokens[t].substring( PARAMETER_M_DELIMETER.length ) ] = requestTokens[t]\n\t\telse if (ptokens[t].startsWith( PARAMETER_O_DELIMETER ) ) {\n\t\t\tif ( requestTokens[t].length > 0 )\n\t\t\t\tparameterReplacements[ ptokens[t].substring( PARAMETER_O_DELIMETER.length ) ] = requestTokens[t]\n\t\t}\n\t\telse if ( ptokens[t].startsWith( PARAMETER_G_DELIMETER ) )\n\t\t\tparameterReplacements[ ptokens[t].substring( PARAMETER_G_DELIMETER.length ) ] = requestTokens[t]\n\t\telse if ( ptokens[t].startsWith( PARAMETER_R_DELIMETER ) ) {\n\t\t\tlet pName = ptokens[t].substring( PARAMETER_R_DELIMETER.length )\n\t\t\tlet array = this.config[ pName ]\n\t\t\tif ( !array || !(array.includes(requestTokens[t])) )\n\t\t\t\treturn false\n\t\t\tparameterReplacements[ pName ] = requestTokens[t]\n\t\t}\n\t\telse {\n\t\t\tidx = (t === requestTokens.length - 1) ? requestTokens[t].lastIndexOf('?') : -1\n\t\t\tlet rt = idx > -1 ? requestTokens[t].substring( 0, idx ) : requestTokens[t]\n\t\t\tif ( ptokens[t].toUpperCase() !== rt.toUpperCase() )\n\t\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nPath.prototype.apiKeyRequired = function ( ) {\n\treturn this.protected\n}\nPath.prototype.callProtector = function ( req, res, pathname, callback ) {\n\tif ( req && this.protector )\n\t\treturn this.protector( req, res, pathname, this, callback )\n\telse return Proback.quicker( 'ok', callback )\n}\n\nPath.prototype.matches = function ( req, pathname, version, alterEnvironment, protectAPI ) {\n\tif ( !( pathname.startsWith( this.context ) ) )\n\t\treturn false\n\tlet rPathname = pathname.substring( this.context.length )\n\n\tlet parameterReplacements = {}\n\n\tif ( this.isRegex ) {\n\t\treturn this.path.test( rPathname )\n\t}\n\telse if ( this.isString ) {\n\t\tif ( !this.innerMatches( rPathname, parameterReplacements ) )\n\t\t\treturn false\n\n\t\tif ( req && alterEnvironment ) {\n\t\t\tfor ( let key of Object.keys( parameterReplacements ) )\n\t\t\t\treq.query[ key ] = parameterReplacements[ key ]\n\t\t}\n\n\t\treturn true\n\t}\n\telse if ( this.isObject ) {\n\t\tif ( this.isSubReged )\n\t\t\treturn this.path.path.test( rPathname )\n\n\t\tif ( !matchesVersion( version, this.path.version ) || !this.innerMatches( rPathname, parameterReplacements ) )\n\t\t\treturn false\n\n\t\tif ( req && alterEnvironment ) {\n\t\t\tfor ( let key of Object.keys( parameterReplacements ) )\n\t\t\t\treq.query[ key ] = parameterReplacements[ key ]\n\t\t}\n\n\t\treturn true\n\t}\n\treturn false\n}\n\nPath.prototype.matchings = function ( version ) {\n\tif ( this.isRegex || this.isString )\n\t\treturn true\n\tif ( this.isObject )\n\t\treturn matchesVersion( version, this.path.version )\n\n\treturn false\n}\n\n\nmodule.exports = Path\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/services/Performer.js":"'use strict'\n\nlet querystring = require('querystring')\n\nlet util = require('../util/Converter')\nlet _ = require('isa.js')\n\nlet Httphelper = require('../util/HttpHelper')\nlet httphelper = new Httphelper()\n\nlet ReadableStream = require('stream').Readable\nfunction isBuffer (obj) {\n\treturn Buffer.isBuffer(obj)\n}\nfunction isReadableStream (obj) {\n\treturn obj instanceof ReadableStream\n}\n\nvar Assigner = require('assign.js')\nvar assigner = new Assigner()\n\nlet defaultPurifyConfig = { arrayMaxSize: 100, maxLevel: 3 }\nfunction purify ( obj, config, level, path ) {\n\tconfig = config || defaultPurifyConfig\n\tif (!obj) return obj\n\tif ( _.isDate(obj) || _.isBoolean(obj) || _.isNumber(obj) || _.isString(obj) || _.isRegExp(obj) )\n\t\treturn obj\n\tif ( _.isFunction(obj) )\n\t\treturn 'fn(){}'\n\tif ( _.isArray(obj) ) {\n\t\tlet arr = []\n\t\tobj.forEach( function ( element ) {\n\t\t\tif ( path.includes( element ) ) return\n\t\t\tpath.push( element )\n\t\t\tarr.push( arr.length > config.arrayMaxSize ? '...' : purify( element, config, level + 1, path ) )\n\t\t} )\n\t\treturn arr\n\t}\n\tif ( _.isObject(obj) ) {\n\t\tlet res = {}\n\t\tfor (let key in obj)\n\t\t\tif ( key && obj[key] ) {\n\t\t\t\tif ( path.includes( obj[key] ) ) continue\n\t\t\t\tpath.push( obj[key] )\n\t\t\t\tres[key] = level > config.maxLevel ? '...' : purify( obj[key], config, level + 1, path )\n\t\t\t}\n\t\treturn res\n\t}\n\treturn '...'\n}\n\nfunction setHeaders ( res, statusCode, headers ) {\n\tfor ( let key in headers ) {\n\t\tres.setHeader( key, headers[key] )\n\t}\n\tres.statusCode = statusCode\n\t// res.writeHead( statusCode, headers )\n}\n\nfunction returnResult ( err, result, res, globalHeaders ) {\n\tlet headers = assigner.assign( {}, globalHeaders || {} )\n\tif ( err ) {\n\t\theaders = assigner.assign( headers, { 'Content-Type': 'text/plain' } )\n\t\tsetHeaders( res, err.statusCode || 500, headers )\n\t\t// res.writeHead( err.statusCode || 500, { 'Content-Type': 'text/plain' } )\n\t\tres.end( 'Error occurred: ' + err )\n\t} else {\n\t\tif ( !result.contentType )\n\t\t\tresult.contentType = 'application/json'\n\t\theaders = assigner.assign( headers, result.resOptions.headers || { } )\n\t\tif ( !headers['Content-Type'] )\n\t\t\theaders['Content-Type'] = result.contentType || 'application/json'\n\t\tsetHeaders( res, result.resOptions.statusCode || 200, headers )\n\t\t// res.writeHead( result.resOptions.statusCode || 200, headers )\n\n\t\tres.end( (result.contentType === 'application/json') ? util.stringify( result.result, result.resOptions.minify, _ ) : result.result )\n\t}\n}\n\nexports.process = function (req, res, action, bodyObj) {\n\tlet self = this\n\n\tself.logger.restlog( null, 'Process request', { body: bodyObj }, 'verbose' )\n\n\tlet asyncCall = req.query.callbackURL\n\n\treq.headers.httpVersion = req.httpVersion\n\treq.headers.method = req.method\n\treq.headers.originalUrl = req.originalUrl\n\treq.parameters = req.params = req.query\n\treq.format = function () {\n\t\tlet obj = { headers: self.headers, parameters: self.parameters }\n\t\tself.config.attributesRespected.forEach( function (attribute) {\n\t\t\tobj[ attribute ] = self[ attribute ]\n\t\t} )\n\t\treturn JSON.stringify( obj )\n\t} // .bind( req )\n\treq.headers.clientAddress = (req.headers['x-forwarded-for'] || '').split(',')[0] || req.connection.remoteAddress\n\n\tlet requestTime = Date.now()\n\taction( req, bodyObj, function (err, result) {\n\t\tself.logger.restlog( err, 'Result', purify( { result: result }, null, 0, []), 'verbose' )\n\n\t\tif ( self.config.timeout && (Date.now() - requestTime) > self.config.timeout.amount ) {\n\t\t\tself.logger.restlog( new Error('Request timed out'), 'Request timed out', req.headers, 'error' )\n\t\t\tif ( self.config.timeout.callback ) self.config.timeout.callback( req, res )\n\t\t\treturn\n\t\t}\n\n\t\tresult = result || { result: '', resOptions: { statusCode: 204 } }\n\n\t\tif ( asyncCall ) {\n\t\t\thttphelper.generalCall( asyncCall, 'POST', null, err, result, result.contentType || 'application/json', self.logger, function (err, result, status) {\n\t\t\t\tself.logger.restlog( err, 'Async response sent.', purify( { result: result, status: status }, null, 0, []), 'verbose' )\n\t\t\t} )\n\t\t} else {\n\t\t\tif ( err ) {\n\t\t\t\treturnResult( err, null, res, self.config.headers )\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( isBuffer( result.result ) ) {\n\t\t\t\t\tresult.result = ( result.contentType === 'application/json') ? JSON.stringify( result.result ) : result.result.toString( result.resOptions.encoding || 'utf8' )\n\t\t\t\t}\n\t\t\t\tif ( isReadableStream( result.result ) ) {\n\t\t\t\t\tresult.result.on('open', function () {\n\t\t\t\t\t\tlet headers = result.resOptions.headers || { }\n\t\t\t\t\t\tif ( !headers['Content-Type'] && result.contentType ) {\n\t\t\t\t\t\t\theaders['Content-Type'] = result.contentType\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetHeaders( res, result.resOptions.statusCode || 200, headers )\n\t\t\t\t\t\t// res.writeHead( result.resOptions.statusCode || 200, headers )\n\t\t\t\t\t})\n\t\t\t\t\tresult.result.on('error', function ( error ) {\n\t\t\t\t\t\treturnResult( error, null, res, self.config.headers )\n\t\t\t\t\t})\n\t\t\t\t\tresult.result.pipe( res )\n\t\t\t\t}\n\t\t\t\telse if ( _.isFunction( result.result ) ) {\n\t\t\t\t\tresult.result( function (err_, res_) {\n\t\t\t\t\t\tresult.result = res_\n\t\t\t\t\t\treturnResult( err_, result, res, self.config.headers )\n\t\t\t\t\t} )\n\t\t\t\t}\n\t\t\t\telse if ( _.isString( result.result ) || Array.isArray( result.result ) || _.isObject( result.result ) ) {\n\t\t\t\t\treturnResult( null, result, res, self.config.headers )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} )\n\n\tif ( asyncCall ) {\n\t\tres.statusCode = 200\n\t\tres.end( JSON.stringify( { answer: 'OK.'} ) )\n\t}\n}\n\nexports.perform = function ( req, res, next ) {\n\tlet self = this\n\n\tlet router = self.getRouterMatching( req, res )\n\n\tlet routeMatched = router.route\n\n\tself.logger.restlog( null, 'Incoming request.', { headers: req.headers, query: req.query, httpVersion: req.httpVersion, method: req.method, originalUrl: req.originalUrl, pathname: router.pathname }, 'verbose' )\n\n\tif ( routeMatched ) {\n\t\tself.logger.restlog( null, 'Route matched.', { route: routeMatched }, 'verbose' )\n\n\t\tif ( routeMatched.apiKeyRequired() ) {\n\t\t\tlet apiKey = req.headers['api-key'] || req.headers['x-api-key'] || req.query.api_key\n\t\t\tlet apiKeys = routeMatched.apiKeys || self.config.apiKeys\n\t\t\tif ( apiKeys && apiKeys.indexOf(apiKey ) === -1 ) {\n\t\t\t\tself.logger.restlog( null, 'Request without api key.', { pathname: router.pathname }, 'verbose' )\n\n\t\t\t\tres.statusCode = 401\n\t\t\t\tres.end( 'API_KEY is required.' )\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\trouteMatched.callProtector( req, res, router.pathname, function (err) {\n\t\t\tif ( !err ) {\n\t\t\t\tself.process(req, res, routeMatched.maction, req.body)\n\t\t\t} else {\n\t\t\t\tself.logger.restlog( null, 'Request is blocked by the API\\'s protector.', { pathname: router.pathname }, 'verbose' )\n\t\t\t\tres.statusCode = 401\n\t\t\t\tres.end( err.message )\n\t\t\t}\n\t\t} )\n\t} else {\n\t\tself.logger.restlog( null, 'Request won\\'t be handled by connect-rest.', { pathname: router.pathname }, 'verbose' )\n\t\tnext()\n\t}\n}\n\nexports.processRequest = function ( ) {\n\treturn this.perform.bind( this )\n}\n\nexports.proxy = function proxyRest ( method, path, remotePath, options ) {\n\tlet self = this\n\n\toptions = options || {}\n\tconsole.log( method )\n\tself.assign( [ method ], path, function ( request, content, callback ) {\n\t\tlet headers = options.remoteHeaders || {}\n\t\tif ( options.bypassHeader )\n\t\t\theaders = assigner.assign( headers, request.headers )\n\t\thttphelper.generalCall(\n\t\t\tremotePath + ( options.ignoreQuery ? '' : querystring.stringify( request.query ) ),\n\t\t\tmethod, headers, null, content, null, null, function (err, body, meta) {\n\t\t\t\tcallback( err, body )\n\t\t\t}\n\t\t)\n\t}, null, options)\n}\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/util/Converter.js":"'use strict'\n\nexports.minify = function (json) {\n\tlet tokenizer = /\"|'|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r/g,\n\t\tin_string = false,\n\t\tin_multiline_comment = false,\n\t\tin_singleline_comment = false,\n\t\ttmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc\n\n\n\ttokenizer.lastIndex = 0\n\n\twhile ( (tmp = tokenizer.exec(json)) ) {\n\t\tlc = RegExp.leftContext\n\t\trc = RegExp.rightContext\n\t\tif (!in_multiline_comment && !in_singleline_comment) {\n\t\t\ttmp2 = lc.substring(from)\n\t\t\tif (!in_string) {\n\t\t\t\ttmp2 = tmp2.replace( /(\\n|\\r|\\s)*/g, '')\n\t\t\t}\n\t\t\tnew_str[ns] = tmp2\n\t\t\tns += 1\n\t\t}\n\t\tfrom = tokenizer.lastIndex\n\n\t\tif (tmp[0] === '\\\"' && !in_multiline_comment && !in_singleline_comment) {\n\t\t\ttmp2 = lc.match(/(\\\\)*$/)\n\t\t\tif (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {\t// start of string with \", or unescaped \" character found to end string\n\t\t\t\tin_string = !in_string\n\t\t\t}\n\t\t\tfrom -= 1 // include \" character in next catch\n\t\t\trc = json.substring(from)\n\t\t}\n\t\telse if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {\n\t\t\tin_multiline_comment = true\n\t\t}\n\t\telse if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {\n\t\t\tin_multiline_comment = false\n\t\t}\n\t\telse if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {\n\t\t\tin_singleline_comment = true\n\t\t}\n\t\telse if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {\n\t\t\tin_singleline_comment = false\n\t\t}\n\t\telse if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {\n\t\t\tnew_str[ns] = tmp[0]\n\t\t\tns += 1\n\t\t}\n\t}\n\tnew_str[ns] = rc\n\tns += 1\n\n\treturn new_str.join( '' )\n}\n\nexports.stringify = function ( obj, minify, _ ) {\n\treturn minify && _.isString(obj) ? exports.minify( obj ) : JSON.stringify(obj)\n}\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/util/HttpHelper.js":"'use strict'\n\nlet http = require('http')\nlet https = require('https')\nlet _ = require('isa.js')\nlet url = require('url')\nlet querystring = require('querystring')\n\nfunction getQuery ( query ) {\n\treturn query ? '?' + querystring.stringify( query ) : ''\n}\n\nfunction HttpHelper ( opts ) {\n\tthis.options = opts || {}\n\n\tthis.opt = {\n\t\thostname: 'localhost',\n\t\tport: 80,\n\t\tpath: '',\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'accept-version': '1.0.0',\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t}\n}\n\nlet httpHelper = HttpHelper.prototype\n\nhttpHelper.get = function (serverURL, query, payload, callback) {\n\tthis.generalCall( serverURL + getQuery(query), 'GET', this.options.headers, null, payload, null, this.options.logger, callback )\n}\nhttpHelper.post = function (serverURL, query, payload, callback) {\n\tthis.generalCall( serverURL + getQuery(query), 'POST', this.options.headers, null, payload, null, this.options.logger, callback )\n}\nhttpHelper.put = function (serverURL, query, payload, callback) {\n\tthis.generalCall( serverURL + getQuery(query), 'PUT', this.options.headers, null, payload, null, this.options.logger, callback )\n}\nhttpHelper.patch = function (serverURL, query, payload, callback) {\n\tthis.generalCall( serverURL + getQuery(query), 'PATCH', this.options.headers, null, payload, null, this.options.logger, callback )\n}\nhttpHelper.del = function (serverURL, query, payload, callback) {\n\tthis.generalCall( serverURL + getQuery(query), 'DELETE', this.options.headers, null, payload, null, this.options.logger, callback )\n}\n\nhttpHelper.callOn = function ( options ) {\n\texports.generalCall( options.serverURL, options.method || 'GET', options.headers, options.err, options.result, options.mimetype, options.logger, options.callback )\n}\n\nhttpHelper.generalCall = function (serverURL, method, headers, err, result, mimetype, logger, callback) {\n\tlet self = this\n\n\tlet server = _.isString( serverURL ) ? url.parse( serverURL ) : serverURL\n\n\tif (logger)\n\t\tlogger.debug('Async server data:', server)\n\n\tlet voptions = JSON.parse(JSON.stringify( this.opt ))\n\tvoptions.hostname = server.hostname\n\tvoptions.port = server.port\n\tvoptions.path = server.path\n\tif (method)\n\t\tvoptions.method = method\n\n\tif ( headers ) {\n\t\tfor (let name in headers)\n\t\t\tif (headers.hasOwnProperty(name))\n\t\t\t\tvoptions.headers[ name ] = headers[ name ]\n\t}\n\n\tmimetype = mimetype || 'application/json'\n\tvoptions.headers['Content-Type'] = mimetype\n\n\tif (logger)\n\t\tlogger.debug('Options to be used:', voptions)\n\n\tlet lib = (server.protocol === 'https:' ? https : http)\n\n\tlet data\n\tlet payload = err ? { errorMessage: err.message, errorCode: err.errorCode || err.code || err.statusCode || -1 } : result\n\tif ( payload ) {\n\t\tdata = (mimetype === 'application/json') ? JSON.stringify( payload ) : querystring.stringify( payload )\n\t\tvoptions.headers['Content-Length'] = Buffer.byteLength( data )\n\t\tif (logger)\n\t\t\tlogger.debug('Payload to be sent:', data)\n\t}\n\n\tlet responseStatus\n\tlet req = lib.request( voptions, function (res) {\n\t\tlet body = ''\n\t\tres.on('data', function (chunk) {\n\t\t\tbody += chunk\n\t\t})\n\t\tres.on('end', function ( ) {\n\t\t\tresponseStatus = { statusCode: res.statusCode, headers: res.headers }\n\t\t\tcallback(null, (body && (self.options.forceJSON || (res.headers['content-type'] && res.headers['content-type'] === 'application/json') ) ) ? JSON.parse(body) : body, responseStatus )\n\t\t})\n\t})\n\treq.on('error', function (er) {\n\t\tcallback(er, 'Failed.', responseStatus)\n\t})\n\tif ( data )\n\t\treq.write( data )\n\n\treq.end()\n}\n\n\nmodule.exports = HttpHelper\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/services/Remover.js":"'use strict'\n\nlet _ = require('isa.js')\nlet semver = require('semver')\n\nexports.removePath = function (key, path, version) {\n\tif ( !this.mapping[ key ] ) return\n\n\tlet newRoutes = []\n\tthis.mapping[ key ].forEach( function (route) {\n\t\tif ( !route.matches( null, path, version || '*', _, semver, false, false ) )\n\t\t\tnewRoutes.push( route )\n\t} )\n\tthis.mapping[ key ] = newRoutes\n}\n\nexports.unhead = function (path, version) {\n\tthis.removePath( 'HEAD', path, version )\n}\nexports.unget = function (path, version) {\n\tthis.removePath( 'GET', path, version )\n}\nexports.unpost = function (path, version) {\n\tthis.removePath( 'POST', path, version )\n}\nexports.unput = function (path, version) {\n\tthis.removePath( 'PUT', path, version )\n}\nexports.unpatch = function (path, version) {\n\tthis.removePath( 'PATCH', path, version )\n}\nexports.unoptions = function (path, version) {\n\tthis.removePath( 'OPTIONS', path, version )\n}\nexports.undel = function (path, version) {\n\tthis.removePath( 'DELETE', path, version )\n}\nexports.unassign = function headRest (methods, path, version) {\n\tlet self = this\n\tif ( Array.isArray(methods) ) {\n\t\tmethods.forEach(function (method) {\n\t\t\tmethod = method.toLowerCase()\n\t\t\tmethod = (method === 'delete') ? 'del' : method\n\t\t\tif ( !self[ 'un' + method ] )\n\t\t\t\tthrow new Error('Not known rest type', method)\n\t\t\tself[ 'un' + method ](path, version)\n\t\t})\n\t}\n\telse if ( methods === '*' )\n\t\tthis.unassign( ['head', 'get', 'post', 'put', 'patch', 'options', 'delete'], path, version )\n\telse\n\t\tthrow new Error('Not correct given methods', methods)\n}\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/lib/util/Dispatcher.js":"'use strict'\n\nlet Path = require('./Path')\n\nexports.dispatch = function ( method, _path, url, handler ) {\n\tlet path = new Path( '', _path, {} )\n\n\treturn function (req, res, next) {\n\t\tif (method !== req.method && method !== '*') {\n\t\t\treturn next()\n\t\t}\n\n\t\t// if(!req.query) req.query = {}\n\t\tif (!req.params) req.params = {}\n\n\t\tlet pathname = url.parse( req.url ).pathname\n\n\t\tif ( path.matches(\n\t\t\t\treq, pathname, '*', true, false\n\t\t) ) {\n\t\t\tfor ( let key of Object.keys(req.query) )\n\t\t\t\treq.params[ key ] = req.query[ key ]\n\t\t\treturn handler(req, res, next)\n\t\t}\n\t\telse\n\t\t\treturn next()\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/.eslintrc.js":"module.exports = {\n\t\"parserOptions\": {\n\t\t\"ecmaVersion\": 8\n\t},\n\t\"env\": {\n\t\t\"es6\": true,\n\t\t\"node\": true,\n\t\t\"commonjs\": true,\n\t\t\"mongo\": true,\n\t\t\"mocha\": true,\n\t\t\"browser\": true\n\t},\n\t\"rules\": {\n\t\t\"accessor-pairs\": 2,\n\t    \"arrow-spacing\": [2, { \"before\": true, \"after\": true }],\n\t    \"block-spacing\": [2, \"always\"],\n\t    \"camelcase\": [2, { \"properties\": \"never\" }],\n\t    \"comma-dangle\": [2, \"never\"],\n\t    \"comma-spacing\": [2, { \"before\": false, \"after\": true }],\n\t    \"comma-style\": [2, \"last\"],\n\t    \"constructor-super\": 2,\n\t    \"dot-location\": [2, \"property\"],\n\t    \"eol-last\": 2,\n\t    \"eqeqeq\": [2, \"allow-null\"],\n\t    \"func-call-spacing\": [2, \"never\"],\n\t    \"handle-callback-err\": [2, \"^(err|error)$\" ],\n\t    \"key-spacing\": [2, { \"beforeColon\": false, \"afterColon\": true }],\n\t    \"keyword-spacing\": [2, { \"before\": true, \"after\": true }],\n\t    \"new-cap\": [2, { \"newIsCap\": true, \"capIsNew\": false }],\n\t    \"new-parens\": 2,\n\t    \"no-array-constructor\": 2,\n\t    \"no-caller\": 2,\n\t    \"no-class-assign\": 2,\n\t    \"no-cond-assign\": 2,\n\t    \"no-const-assign\": 2,\n\t    \"no-constant-condition\": [2, { \"checkLoops\": false }],\n\t    \"no-control-regex\": 2,\n\t    \"no-debugger\": 2,\n\t    \"no-delete-var\": 2,\n\t    \"no-dupe-args\": 2,\n\t    \"no-dupe-class-members\": 2,\n\t    \"no-dupe-keys\": 2,\n\t    \"no-duplicate-case\": 2,\n\t    \"no-duplicate-imports\": 2,\n\t    \"no-empty-character-class\": 2,\n\t    \"no-empty-pattern\": 2,\n\t    \"no-eval\": 2,\n\t    \"no-ex-assign\": 2,\n\t    \"no-extra-bind\": 2,\n\t    \"no-extra-boolean-cast\": 2,\n\t    \"no-extra-parens\": [2, \"functions\"],\n\t    \"no-fallthrough\": 2,\n\t    \"no-floating-decimal\": 2,\n\t    \"no-func-assign\": 2,\n\t    \"no-global-assign\": 2,\n\t    \"no-implied-eval\": 2,\n\t    \"no-inner-declarations\": [2, \"functions\"],\n\t    \"no-invalid-regexp\": 2,\n\t    \"no-irregular-whitespace\": 2,\n\t    \"no-iterator\": 2,\n\t    \"no-label-var\": 2,\n\t    \"no-labels\": [2, { \"allowLoop\": false, \"allowSwitch\": false }],\n\t    \"no-lone-blocks\": 2,\n\t    \"no-mixed-spaces-and-tabs\": 2,\n\t    \"no-multi-spaces\": 2,\n\t    \"no-multi-str\": 2,\n\t    \"no-native-reassign\": 2,\n\t    \"no-negated-in-lhs\": 2,\n\t    \"no-new\": 2,\n\t    \"no-new-func\": 2,\n\t    \"no-new-object\": 2,\n\t    \"no-new-require\": 2,\n\t    \"no-new-symbol\": 2,\n\t    \"no-new-wrappers\": 2,\n\t    \"no-obj-calls\": 2,\n\t    \"no-octal\": 2,\n\t    \"no-octal-escape\": 2,\n\t    \"no-path-concat\": 2,\n\t    \"no-proto\": 2,\n\t    \"no-redeclare\": 2,\n\t    \"no-regex-spaces\": 2,\n\t    \"no-return-assign\": [2, \"except-parens\"],\n\t    \"no-self-assign\": 2,\n\t    \"no-self-compare\": 2,\n\t    \"no-sequences\": 2,\n\t    \"no-shadow-restricted-names\": 2,\n\t    \"no-sparse-arrays\": 2,\n\t    \"no-template-curly-in-string\": 2,\n\t    \"no-this-before-super\": 2,\n\t    \"no-throw-literal\": 2,\n\t    \"no-trailing-spaces\": 2,\n\t    \"no-undef\": 2,\n\t    \"no-undef-init\": 2,\n\t    \"no-unexpected-multiline\": 2,\n\t    \"no-unmodified-loop-condition\": 2,\n\t    \"no-unneeded-ternary\": [2, { \"defaultAssignment\": false }],\n\t    \"no-unreachable\": 2,\n\t    \"no-unsafe-finally\": 2,\n\t    \"no-unsafe-negation\": 2,\n\t    \"no-unused-vars\": [2, { \"vars\": \"all\", \"args\": \"none\" }],\n\t    \"no-useless-call\": 2,\n\t    \"no-useless-computed-key\": 2,\n\t    \"no-useless-constructor\": 2,\n\t    \"no-useless-escape\": 2,\n\t    \"no-useless-rename\": 2,\n\t    \"no-with\": 2,\n\t    \"operator-linebreak\": [2, \"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\" } }],\n\t    \"quotes\": [2, \"single\", { \"avoidEscape\": true, \"allowTemplateLiterals\": true }],\n\t    \"rest-spread-spacing\": [2, \"never\"],\n\t    \"semi\": [2, \"never\"],\n\t    \"semi-spacing\": [2, { \"before\": false, \"after\": true }],\n\t    \"space-before-blocks\": [2, \"always\"],\n\t    \"space-before-function-paren\": [2, \"always\"],\n\t    \"space-infix-ops\": 2,\n\t    \"space-unary-ops\": [2, { \"words\": true, \"nonwords\": false }],\n\t    \"spaced-comment\": [2, \"always\", { \"line\": { \"markers\": [\"*package\", \"!\", \",\"] }, \"block\": { \"balanced\": true, \"markers\": [\"*package\", \"!\", \",\"], \"exceptions\": [\"*\"] } }],\n\t    \"template-curly-spacing\": [2, \"never\"],\n\t    \"unicode-bom\": [2, \"never\"],\n\t    \"use-isnan\": 2,\n\t    \"valid-typeof\": 2,\n\t\t\"wrap-iife\": [2, \"any\"],\n\t    \"yield-star-spacing\": [2, \"both\"],\n\t    \"yoda\": [2, \"never\"],\n\n\t\t\"indent\": [\"error\", \"tab\"],\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/Gulpfile.js":"'use strict'\n\nlet gulp = global.gulp = require('gulp')\n\nlet plugins = require('gulp-load-plugins')( { scope: ['devDependencies'] } )\n\ngulp.task( 'lint', function (callback) {\n\treturn gulp.src( 'lib/*.js' )\n\t\t.pipe( plugins.eslint() )\n        .pipe( plugins.eslint.format() )\n        .pipe( plugins.eslint.failAfterError() )\n} )\n\ngulp.task( 'mocha', function (callback) {\n\treturn gulp.src( './test/*.mocha.js' ).pipe( plugins.mocha({reporter: 'nyan'}) )\n} )\n\ngulp.task( 'default', [ 'lint', 'mocha' ] )\n","/home/travis/build/npmtest/node-npmtest-connect-rest/node_modules/connect-rest/dummytest/ServiceTest.js":"var http = require('http')\n\nvar connect = require('connect')\nvar bodyParser = require('body-parser')\n\nvar rest = require('../lib/connect-rest')\n\nvar server\nvar app = connect()\n\t.use( bodyParser.urlencoded( { extended: true } ) )\n\t.use( bodyParser.json() )\n\nvar options = {\n\tcontext: '/api',\n\tlogger: { file: 'mochaTest.log', level: 'debug' },\n\tapiKeys: [ '849b7648-14b8-4154-9ef2-8d1dc4c2b7e9' ]\n}\napp.use( rest.rester( options ) )\n\nrest.get({\n\tpath: '/:section/:fnc/*data',\n\tunprotected: true\n}, function (request, content, callback) {\n\tconsole.log('?????')\n\tcallback( null, 'Done.' )\n})\n\nrest.get({\n\tpath: '/a', unprotected: true\n}, function (req, ct, cb) {\n\tconsole.log('!!!!!!!')\n\treturn cb(null, 'oi')\n})\n\nvar port = process.env.PORT || 8080\nserver = http.createServer(app)\n\nserver.listen( port, function () {\n\tconsole.log('Running on http://localhost:8080')\n})\n"}